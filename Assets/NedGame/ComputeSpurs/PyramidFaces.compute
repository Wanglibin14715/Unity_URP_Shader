// MIT License

// Copyright (c) 2020 NedMakesGames

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma kernel Main

#include "NMGPyramidComputeHelpers.hlsl"

// This describes a vertex on the source mesh
struct SourceVertex {
    float3 positionOS; // position in object space
    float2 uv; // UV
};
// This describes a vertex on the generated mesh
struct DrawVertex {
    float3 positionWS; // position in world space
    float2 uv; // UV
};
// We have to insert three draw vertices at once so the triangle stays connected
// in the graphics shader. This structure does that
struct DrawTriangle {
    float3 normalWS; // normal in world space. All points share this normal
    DrawVertex vertices[3];
};

// Compute buffers
StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceTriangles;
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

// Other variables set by the renderer script
int _NumSourceTriangles;
float _PyramidHeight;
float4x4 _LocalToWorld;

// This converts a source vertex into a draw vertex by converting from OS to WS
DrawVertex TransformToWorldSpace(SourceVertex v) {
    DrawVertex o;
    o.positionWS = mul(_LocalToWorld, float4(v.positionOS, 1)).xyz;
    o.uv = v.uv;
    return o;
}

void SetupAndOutputTriangle(DrawVertex a, DrawVertex b, DrawVertex c) {
    // Since we extrude the center face, the normal must be recalculated
    float3 normalWS = GetNormalFromTriangle(a.positionWS, b.positionWS, c.positionWS);

    // Create a draw triangle from three points
    DrawTriangle tri;
    tri.normalWS = normalWS;
    tri.vertices[0] = a;
    tri.vertices[1] = b;
    tri.vertices[2] = c;

    // Add the output tri to the output buffer
    _DrawTriangles.Append(tri);
}

// This is the number of threads to create per dispatch. This kernel only uses the
// x value, so you can fine tune that if needed
[numthreads(128, 1, 1)]
void Main(uint3 id : SV_DispatchThreadID) {
    // Disptaches can only be in chunks of 128, there might be more threads than number
    // of triangles. Return in that case
    if ((int)id.x >= _NumSourceTriangles) {
        return;
    }

    // Get the vertices which make up this triangle
    // The triangle array contains indices to the vertex array
    // Three values in the triangle array describe one triangle in the source mesh
    int triStart = id.x * 3;
    DrawVertex inputs[3];
    inputs[0] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart]]);
    inputs[1] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart + 1]]);
    inputs[2] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart + 2]]);

    DrawVertex center;
    // We need the triangle's normal to extrude the center point
    float3 triNormal = GetNormalFromTriangle(inputs[0].positionWS, inputs[1].positionWS, inputs[2].positionWS);
    // Find the center position and extrude by _PyramidHeight along the normal
    center.positionWS = GetTriangleCenter(inputs[0].positionWS, inputs[1].positionWS, inputs[2].positionWS) + triNormal * _PyramidHeight;
    // Average the UVs as well
    center.uv = GetTriangleCenter(inputs[0].uv, inputs[1].uv, inputs[2].uv);

    // Create the three triangles.
    // Triangles must wind clockwise or they will not render by default
    SetupAndOutputTriangle(inputs[0], inputs[1], center);
    SetupAndOutputTriangle(inputs[1], inputs[2], center);
    SetupAndOutputTriangle(inputs[2], inputs[0], center);
}
